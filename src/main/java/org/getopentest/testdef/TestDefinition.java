package org.getopentest.testdef;

import java.util.ArrayList;
import java.util.List;

/**
 * Represents the contents of a test definition file.
 */
public class TestDefinition {

	private String description;

	private List<String> tags;

	private List<TestDefActor> actors;

	/**
	 * This property can be either a string that represents a JS expression
	 * evaluating to a JS array or an objects that implements the List interface,
	 * when the dataSet property is populated using a YAML sequence (list of items).
	 */
	private Object dataSet;

	private Object includes;

	public TestDefinition() {
		actors = new ArrayList<TestDefActor>();
		tags = new ArrayList<String>();
	}

	public String getDescription() {
		return description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	public List<String> getTags() {
		return tags;
	}

	public void setTags(List<String> tags) {
		this.tags = tags;
	}

	public List<TestDefActor> getActors() {
		return actors;
	}

	public TestDefActor getActor(String name) {
		for (TestDefActor actor : this.actors) {
			if (actor.getActor().equals(name)) {
				return actor;
			}
		}
		TestDefActor actor = new TestDefActor();
		actor.setActor(name);
		this.actors.add(actor);
		return actor;
	}

	public void setActors(List<TestDefActor> actors) {
		this.actors = actors;
	}

	public Object getDataSet() {
		return dataSet;
	}

	public void setDataSet(Object dataSet) {
		this.dataSet = dataSet;
	}

	public Object getIncludes() {
		return includes;
	}

	public void setIncludes(Object includes) {
		this.includes = includes;
	}

	public void addAction(String actor, int segment, TestDefAction action) {
		TestDefActor testDefActor = this.getActor(actor);
		TestDefSegment testDefSegment = testDefActor.getSegment(segment);
		if(testDefSegment == null) {
			testDefSegment = new TestDefSegment();
			testDefSegment.setSegment(segment);
			testDefActor.addSegments(testDefSegment);
		}
		testDefSegment.addAction(action);
	}

}
