package org.getopentest.gauge.hooks;

import java.io.FileOutputStream;

import org.apache.commons.io.FilenameUtils;
import org.getopentest.testdef.TestDefAction;
import org.getopentest.testdef.TestDefinition;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.dataformat.yaml.YAMLFactory;
import com.thoughtworks.gauge.AfterScenario;
import com.thoughtworks.gauge.AfterSpec;
import com.thoughtworks.gauge.AfterStep;
import com.thoughtworks.gauge.AfterSuite;
import com.thoughtworks.gauge.BeforeScenario;
import com.thoughtworks.gauge.BeforeSpec;
import com.thoughtworks.gauge.BeforeStep;
import com.thoughtworks.gauge.BeforeSuite;
import com.thoughtworks.gauge.ExecutionContext;
import com.thoughtworks.gauge.datastore.DataStore;
import com.thoughtworks.gauge.datastore.DataStoreFactory;

public class ExecutionHooks {

	@BeforeSuite
	public void BeforeSuite(ExecutionContext context) {
		// Code for before suite
	}

	@AfterSuite
	public void AfterSuite(ExecutionContext context) {
		// Code for after suite
	}

	@BeforeSpec
	public void BeforeSpec(ExecutionContext context) {
		DataStore store = DataStoreFactory.getScenarioDataStore();
		TestDefinition test = new TestDefinition();
		store.put("test", test);
	}

	@AfterSpec
	public void AfterSpec(ExecutionContext context) {
	}

	@BeforeScenario
	public void BeforeScenario(ExecutionContext context) {
		DataStore store = DataStoreFactory.getScenarioDataStore();
		TestDefinition test = new TestDefinition();
		test.setDescription(context.getCurrentScenario().getName());
		test.setTags(context.getCurrentScenario().getTags()

		);
		store.put("test", test);
	}

	@AfterScenario
	public void AfterScenario(ExecutionContext context) {
		DataStore store = DataStoreFactory.getScenarioDataStore();
		TestDefinition test = (TestDefinition) store.get("test");
		YAMLFactory factory = new YAMLFactory();
		factory.setCodec(new ObjectMapper());
		FileOutputStream outputStream;
		try {
			outputStream = new FileOutputStream(
					FilenameUtils.removeExtension(context.getCurrentSpecification().getFileName()) + ".yaml");
			factory.createGenerator(outputStream).writeObject(test);
		} catch (Exception e) {
			throw new RuntimeException(e);
		}
	}

	@BeforeStep
	public void BeforeStep(ExecutionContext context) {
		DataStore store = DataStoreFactory.getScenarioDataStore();
		TestDefAction action = new TestDefAction();
		action.setDescription(context.getCurrentStep().getDynamicText());
		store.put("action", action);
	}

	@AfterStep
	public void AfterStep(ExecutionContext context) {
	}

}